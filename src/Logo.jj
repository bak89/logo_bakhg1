// Parser and translator of a subset of Logo into Java

// Partial implementation that works for the empty.logo program only
// LOGO EMPTY
// END

options {
   FORCE_LA_CHECK = true;
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Logo)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo {

  static private File javaFile, htmlFile;   // output files
  static private PrintWriter pw;            // printwriter used for every output
  static private int numIndent = 0;         // size of indentation
  static private int counter = 0;

  // to pretty-print the translation
  // uses numIndent and pw defined as static variables in LogoParser
  // writes in pw the numIndent times the indent string
  public static void indent() {
    for (int i=0; i<numIndent; i++) { pw.print("   "); }
  }

  // Main method that reads the source file ".logo" and translates it
  // into two files: ".java" ".html"
  public static void main(String args[]) throws ParseException,
                                                TokenMgrError,
                                                IOException
  {
    // reads the source file ".logo" (first argument of command line)
    BufferedReader in = new BufferedReader(new FileReader(args[0]));
    Logo parser = new Logo(in);
    try {
      parser.start();
      System.out.println("DONE");
    }
    catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
    catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
  }
}
PARSER_END(Logo)

// skip separators
SKIP : { <" " | "\t" | "\n" | "\r" > }
SKIP : { < "#" (~["\r", "\n"])* > }

// Constants, pre-defined, operators etc.
TOKEN: { <ADD: "+">   | <SUB: "-">  | <MUL: "*"> | <DIV: "/"> }
TOKEN: { <LPAR: "(">  | <RPAR: ")"> | <#PARSEP: ":"> }
TOKEN: { <LBRA: "[">  | <RBRA: "]"> }
TOKEN: { <EQ: "==">   | <NE: "!=">  }
TOKEN: { <LT: "<">    | <GT: ">">   | <LE: "<="> | <GE: ">="> }
TOKEN: { <AND: "AND"> | <OR: "OR"> }
TOKEN: { <TRUE: "TRUE"> | <FALSE: "FALSE"> | <NOT: "NOT"> }
// REPCOUNT is a pre-defined identifier rather than a keyword
TOKEN: { <REPCOUNT: "REPCOUNT"> }
// Keywords
TOKEN: {
  <CLEARSCREEN: "CS"> |
  <PENDOWN: "PD">     | <PENUP: "PU">      |
  <FORWARD: "FD">     | <BACKWARD: "BK">   |
  <LEFTTURN: "LT">    | <RIGHTTURN: "RT">  |
  <HIDETURTLE: "HT">  | <SHOWTURTLE: "ST"> |
  <WAIT: "WAIT">      | <REPEAT: "REPEAT"> |
  <IF: "IF">          | <IFELSE: "IFELSE"> |
  <SUBROUTINE: "TO">  |
  <LOGO: "LOGO">      | <END: "END">
}
// Numerical values, identifiers, and parameters
TOKEN: { <#DIGIT:  ["0"-"9"]> }
TOKEN: { <#LETTER: ["A"-"Z"]> }
TOKEN: { <NUM: (<DIGIT>)+ | (<DIGIT>)+ "." (<DIGIT>)+ > }
TOKEN: { <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > }
TOKEN: { <PARAMETER: <PARSEP> <IDENTIFIER> > { matchedToken.image=image.substring(1,image.length()); }}

void start() throws IOException:
{ Token t; }
{
  // logo programs start with LOGO followed by an identifier
  <LOGO> t = <IDENTIFIER>
// Creation of the output files
   {
     // Create the HTML file for the applet
     htmlFile = new File(t.image.toLowerCase() + ".html");
     pw = new PrintWriter(new FileOutputStream(htmlFile));
     pw.println("<html>");
     pw.println("  <body>");
     pw.println("  <applet code='" + t.image.toLowerCase() +
                ".class'width=600 height=600></applet>");
     pw.println("  </html>");
     pw.println("</body>");
     pw.close();
     //Create the Java file and the class
     javaFile = new File(t.image.toLowerCase() + ".java");
     pw = new PrintWriter(new FileOutputStream(javaFile));
     pw.println("import java.awt.Graphics;\n");
     //pw.println("import java.util.*;\n");
     pw.println("public class " + t.image.toLowerCase() +
                " extends java.applet.Applet {\n" );
     numIndent++;
     indent();
     pw.println("private LogoPrimitives logo;\n");
     pw.flush();
   }
  ( subroutine() )*
// Open the necessary method "paint" of the applet
   {
     indent(); numIndent++;
     pw.println("public void paint(Graphics g) {");
     indent();
     pw.println("logo = new LogoPrimitives(this);");
     pw.println();
     indent();
     pw.println("int REPCOUNT = 0;");
     pw.println();
   }
  ( statement() )*
// close the method "paint"
   {
     numIndent--;
     indent();
     pw.println("}");
   }
// close the class
  <END>
   { numIndent--; indent();
     pw.println("}");
     pw.flush(); pw.close(); }
   }

void subroutine():{Token functionName; boolean firstParameter = true; }
{
    <SUBROUTINE> functionName = <IDENTIFIER>
    {
        indent();
        pw.print("private void "+ functionName.image.toLowerCase() + "(");
    }
    (
        {
            pw.print(firstParameter?"double ":", double ");
            firstParameter = false;
        }
        parameter()
    )*
    {
        pw.print("){\n");
        numIndent++;
    }

    ( statement() )*

    "END"
    {
        numIndent--;
        indent();
        pw.println("}\n");
    }
}

void statement():{Token functionName; boolean firstParameter = true;}{
<CLEARSCREEN>{indent();pw.println("logo.cs();");} |
<PENDOWN> {indent(); pw.println("logo.pd();");} |
<PENUP> {indent(); pw.println("logo.pu();");} |
<HIDETURTLE> {indent(); pw.println("logo.ht();");} |
<SHOWTURTLE> {indent(); pw.println("logo.st();");} |
<FORWARD> {indent(); pw.print("logo.fd(");} nexpr() {pw.println(");");}|
<BACKWARD> {indent(); pw.print("logo.bk(");} nexpr() {pw.println(");");} |
<LEFTTURN> {indent(); pw.print("logo.lt(");} nexpr() {pw.println(");");} |
<RIGHTTURN> {indent(); pw.print("logo.rt(");} nexpr() {pw.println(");");} |
<WAIT> {indent(); pw.print("logo.wait(");} nexpr() {pw.println(");");}|
<REPEAT>{indent(); counter++; pw.print("for(int i"+ counter+" = 0; i"+counter+" <= ");} nexpr() {pw.println("; i"+counter+"++){");numIndent++;
indent();
pw.println("REPCOUNT = i"+counter+";" );
}
"["  (statement())* "]"{numIndent--; counter--; indent();pw.println("}"); indent(); pw.println("REPCOUNT--;");} |

<IF> {indent(); pw.print("if("); } bexpr() {pw.print("){"); numIndent++;} <LBRA> (statement())* <RBRA> {numIndent--; indent(); pw.println("}");} |
<IFELSE> {indent(); pw.print("if("); } bexpr() {pw.print("){"); numIndent++;} "[" (statement())* "]" {numIndent--; indent();pw.println("}"); indent(); pw.println("else{");numIndent++;} "[" (statement())* "]" {numIndent--; indent(); pw.println("}");}|
functionName = <IDENTIFIER>{indent();pw.print(functionName.image.toLowerCase()+"(");} ({pw.print(firstParameter?"":", "); firstParameter = false;} nexpr())* {firstParameter = true; pw.println(");");}
}


void nexpr():{Token operator;}{
nterm() ((operator=<ADD>{pw.print(operator.image);} | operator=<SUB>{pw.print(operator.image);} ) nterm())*
}

void nterm():{Token operator;}{
nfactor() ((operator=<MUL>{pw.print(operator.image);} | operator=<DIV>{pw.print(operator.image);}) nfactor())*
}

void nfactor():{}{
<SUB> ( number() | repcount() | parameter() | "(" nexpr() ")" ) | number() | repcount() | parameter() | "(" nexpr() ")"
}

void bexpr():{}{
bterm() ("OR" bterm() ) *
}

void bterm():{}{
bfactor() ("AND" bfactor() ) *
}

void bfactor():{Token b;}{
b="TRUE"{pw.print(b.image);} | b="FALSE"{pw.print(b.image);} | b="NOT"{pw.print(b.image);} "(" bexpr() ")"
	   | nexpr() ( b="=="{pw.print(b.image);} | b="!="{pw.print(b.image);}| b="<"{pw.print(b.image);}| b=">"{pw.print(b.image);} | b="<="{pw.print(b.image);} | b=">="{pw.print(b.image);} )  nexpr()
}

void number():{Token t;}{
t=<NUM>{pw.print(t.image);}
}

void parameter():{Token p;}{
p=<PARAMETER> {pw.print(p.image);}
}

void repcount():{Token r;}{
r = <REPCOUNT> {pw.print(r.image);}
}